# -*- coding: utf-8 -*-
"""Zepto inventory analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BNFYXPZCnEWfoO5G-3nUad7q0m7wtErC
"""

from google.colab import files

# Upload the Excel file
uploaded = files.upload()

from google.colab import files
# Upload the Excel file
uploaded = files.upload()

!pip install pandas openpyxl

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

zep_1= pd.read_excel('zepto_v1.xlsx')
zep_1.head()

zep_2 = pd.read_csv('zepto_v2.csv', encoding='ISO-8859-1')
zep_2.head()

"""***QUESTION NO 1***"""

# How many products are listed in each category?
zep_1['Category'].value_counts()

"""**DISCOUNT TRENDS**

***QUESTION NO 2***
"""

#What is the average MRP and discounted price for all products?
# Convert MRP and discounted price from paise to rupees
zep_2['mrp'] = zep_2['mrp'] / 100
zep_2['discountedSellingPrice'] = zep_2['discountedSellingPrice'] / 100

# Calculate averages
average_mrp = zep_2['mrp'].mean()
average_discounted_price = zep_2['discountedSellingPrice'].mean()

# Display results
print(f"Average MRP of all products: ${average_mrp:.2f}")
print(f"Average Discounted Selling Price: ${average_discounted_price:.2f}")

"""***QUESTION NO 3***"""

# How many products are currently out of stock?
stock_1=zep_1['outOfStock'] = zep_1['outOfStock'].astype(bool)
stock_1.value_counts()

"""***QUESTION NO 4***"""

# Which pro# Sort the dataframe by 'discountPercent' in descending order
highest_discount_product = zep_1.sort_values(by='discountPercent', ascending=False).head(1)

# Display the result
print("Product with the highest discount percentage:\n")
print(highest_discount_product[['name', 'Category', 'mrp', 'discountedSellingPrice', 'discountPercent']])
#duct has the highest discount percentage?

"""***QUESTION NO 5 ***"""

# What is the total number of items available in inventory?
total_items  =zep_1['quantity'] . sum()
print(f"total number of items available in inventory :{total_items}")
total_items

"""# **Intermediate question **

***QUESTION NO 1***
"""

# Which category has the highest total inventory value?
cat_high = zep_1['total_inventory_value'] = zep_1['quantity'] * zep_1['mrp']
cat_high

"""***QUESTION NO 2***"""

# What is the average discount percentage by category?
average_discount_by_category = zep_1.groupby('Category')['discountPercent'].mean()

average_discount_by_category

"""***QUESTION NO 3***"""

# Find the top 5 products with the highest stock value.
top_5_products = zep_1.nlargest(5, 'total_inventory_value')[['name', 'total_inventory_value']]
top_5_products

"""***QUESTION NO 4***"""

# What’s the distribution of product weights across categories?
product_weights_by_category = zep_1.groupby('Category')['weightInGms'].mean()

print("Average product weight (in grams) by category:\n")
print(product_weights_by_category)

"""***QUESTION NO 5***"""

# Compare MRP vs discounted price across categories with bar plots
plt.figure(figsize=(10, 6))
sns.barplot(x='Category', y='mrp', data=zep_1, ci=None)
plt.title('Average MRP by Category')
plt.xlabel('Category')
plt.ylabel('Average MRP')
plt.show()

"""***ADVANCED QUESTIONS***

***QUESTION NO 1 ***
"""

#Create an ABC Analysis of products based on inventory value.
#Categorize products into A (high value), B (medium), C (low).

# Step 1: Calculate inventory value per product
zep_1['inventory_value'] = zep_1['availableQuantity'] * zep_1['discountedSellingPrice']

# Step 2: Group by product and sum inventory value
product_value = zep_1.groupby('name')['inventory_value'].sum().sort_values(ascending=False).reset_index()

# Step 3: Calculate cumulative percentage of total inventory value
product_value['cum_value'] = product_value['inventory_value'].cumsum()
total_value = product_value['inventory_value'].sum()
product_value['cum_perc'] = 100 * product_value['cum_value'] / total_value

# Step 4: Assign ABC classes
def classify_abc(V):
    if V <= 70:
        return 'A'
    elif V <= 90:
        return 'B'
    else:
        return 'C'

product_value['ABC_Class'] = product_value['cum_perc'].apply(classify_abc)

# Step 5: View result
product_value.head(10)

"""***QUESTION NO 2***"""

# Simulate a restocking alert system:
# Define restocking threshold
threshold = 20  # Customize as needed

# Flag products that are out of stock or below threshold
restock_alerts = zep_1[(zep_1['availableQuantity'] < threshold) | (zep_1['outOfStock'] == True)]

# Select relevant columns to display
restock_alerts = restock_alerts[['name', 'Category', 'availableQuantity', 'outOfStock', 'discountedSellingPrice']]

# Drop duplicates for unique product-level alerts
restock_alerts = restock_alerts.drop_duplicates(subset=['name'])

# Display alerts
("Restocking Alerts:\n")
(restock_alerts.sort_values(by='availableQuantity'))

"""***QUESTION NO 3***"""

# Calculate overall discount loss per product:
loss_per_product = (zep_1['mrp'] - zep_1['discountedSellingPrice']) / zep_1['mrp'] * 100
zep_1['discount_loss'] = (zep_1['mrp'] - zep_1['discountedSellingPrice']) / zep_1['mrp'] * 100
loss_per_product

"""***QUESTION NO 4***"""

# Estimate potential revenue if all items are sold:
zep_1 # Calculate potential revenue for each product
zep_1['potential_revenue'] = zep_1['availableQuantity'] * zep_1['discountedSellingPrice']

# Total potential revenue if all items are sold
total_revenue = zep_1['potential_revenue'].sum()

print(f"Estimated Total Potential Revenue: ₹{total_revenue:,.2f}")

zep_1.describe()

zep_1.shape

"""***QUESTION NO 5***"""

#Build a price-weight ratio model to flag overpriced items (e.g., high price per gram)
zep_1['price_weight_ratio'] = zep_1['discountedSellingPrice'] / zep_1['weightInGms']
overpriced_items = zep_1[zep_1['price_weight_ratio'] > 5]
overpriced_items = overpriced_items.sort_values(by='price_weight_ratio', ascending=False)
overpriced_items = overpriced_items[['name', 'Category', 'discountedSellingPrice', 'weightInGms', 'price_weight_ratio']]
overpriced_items = overpriced_items.drop_duplicates(subset=['name'])
overpriced_items